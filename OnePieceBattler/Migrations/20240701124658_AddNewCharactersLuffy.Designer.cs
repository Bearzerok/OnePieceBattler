// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnePieceBattler.Data;

#nullable disable

namespace OnePieceBattler.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240701124658_AddNewCharactersLuffy")]
    partial class AddNewCharactersLuffy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("CharacterMove", b =>
                {
                    b.Property<int>("MoveExclusiveCharactersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MoveExclusiveCharactersId", "MovesId");

                    b.HasIndex("MovesId");

                    b.ToTable("CharacterMove");
                });

            modelBuilder.Entity("CharacterQuestCharacters", b =>
                {
                    b.Property<int>("QuestCharactersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestReceiversId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestCharactersId", "QuestReceiversId");

                    b.HasIndex("QuestReceiversId");

                    b.ToTable("QuestCharacter_Receivers", (string)null);
                });

            modelBuilder.Entity("OnePieceBattler.Models.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBattleOver")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayer1Turn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Player1Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Player1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Player2Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Player2Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArmamentHakiPower")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackPower")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleIq")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bounty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConquerorHakiPower")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CrewName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CrewRole")
                        .HasColumnType("TEXT");

                    b.Property<int>("CriticalAttackMultiplier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefensePower")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DevilFruit")
                        .HasColumnType("TEXT");

                    b.Property<int>("DevilFruitType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceToNextLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceToNextLevelBase")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Gold")
                        .HasColumnType("REAL");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAwakened")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefeated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsDefinitiveVersion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMaxLevel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IslandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JollyRogerImagePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Luck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObservationHakiPower")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestCharactersId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("IslandId");

                    b.HasIndex("QuestCharactersId");

                    b.HasIndex("ShipId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArmamentHakiPower = 0,
                            AttackPower = 20,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Monkey D. Luffy",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 100,
                            ImagePath = "/images/characters/luffy.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Luffy",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 2,
                            ArmamentHakiPower = 0,
                            AttackPower = 0,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Zoro the Pirate Hunter",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 200,
                            ImagePath = "/images/characters/zoro.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Zoro",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 3,
                            ArmamentHakiPower = 0,
                            AttackPower = 20,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Marco the Phoenix, Hybrid From",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 100,
                            ImagePath = "/images/characters/marco_hybrid.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Marco",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 4,
                            ArmamentHakiPower = 0,
                            AttackPower = 0,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Gol D. Roger, The Pirate King",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 200,
                            ImagePath = "/images/characters/roger.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Gol D. Roger",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 5,
                            ArmamentHakiPower = 0,
                            AttackPower = 20,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Heavenly Yaksha",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 100,
                            ImagePath = "/images/characters/doflamingo.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Donquixote Doflaming",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 6,
                            ArmamentHakiPower = 0,
                            AttackPower = 0,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Marco the Phoenix, Zoan Form",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 0,
                            ExperienceToNextLevelBase = 0,
                            Gold = 0f,
                            Health = 200,
                            ImagePath = "/images/characters/marco_zoan.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 0,
                            Luck = 0,
                            Name = "Marco",
                            ObservationHakiPower = 0,
                            Speed = 0
                        },
                        new
                        {
                            Id = 7,
                            ArmamentHakiPower = 0,
                            AttackPower = 20,
                            BattleIq = 0,
                            Bounty = 0,
                            CharacterVersion = 0,
                            ConquerorHakiPower = 0,
                            CriticalAttackMultiplier = 0,
                            DefensePower = 10,
                            Description = "Monkey D. Luffy",
                            DevilFruitType = 0,
                            Experience = 0,
                            ExperienceToNextLevel = 100,
                            ExperienceToNextLevelBase = 100,
                            Gold = 0f,
                            Health = 500,
                            ImagePath = "/images/characters/luffy_gear_5.png",
                            IsDefeated = false,
                            IsDefinitiveVersion = 0,
                            IsMaxLevel = false,
                            IsPlayable = false,
                            Level = 1,
                            Luck = 10,
                            Name = "Luffy",
                            ObservationHakiPower = 0,
                            Speed = 10
                        });
                });

            modelBuilder.Entity("OnePieceBattler.Models.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IslandId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int?>("ShipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IslandId")
                        .IsUnique();

                    b.HasIndex("ShipId")
                        .IsUnique();

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Island", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Climate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDiscoveredByCharacter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Terrain")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Islands");
                });

            modelBuilder.Entity("OnePieceBattler.Models.IslandEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IslandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IslandId");

                    b.ToTable("IslandEvents");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IslandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("IslandId");

                    b.HasIndex("QuestId");

                    b.HasIndex("ShipId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BattleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("MoveAccuracy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoveCooldown")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoveCriticalHitChance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoveLuck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovePower")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MovePriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MoveType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfHits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfTargets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelfDamage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.ToTable("Moves");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            MoveAccuracy = 0,
                            MoveCooldown = 0,
                            MoveCriticalHitChance = 0,
                            MoveLuck = 0,
                            MovePower = 100,
                            MovePriority = false,
                            Name = "Kick",
                            NumberOfHits = 0,
                            NumberOfTargets = 0,
                            SelfDamage = 0
                        },
                        new
                        {
                            Id = 1,
                            MoveAccuracy = 0,
                            MoveCooldown = 0,
                            MoveCriticalHitChance = 0,
                            MoveLuck = 0,
                            MovePower = 10,
                            MovePriority = false,
                            Name = "Punch",
                            NumberOfHits = 0,
                            NumberOfTargets = 0,
                            SelfDamage = 0
                        },
                        new
                        {
                            Id = 2,
                            MoveAccuracy = 0,
                            MoveCooldown = 0,
                            MoveCriticalHitChance = 0,
                            MoveLuck = 0,
                            MovePower = 20,
                            MovePriority = false,
                            Name = "Slash",
                            NumberOfHits = 0,
                            NumberOfTargets = 0,
                            SelfDamage = 0
                        });
                });

            modelBuilder.Entity("OnePieceBattler.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperienceReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoldReward")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IslandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrerequisiteQuest")
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoryLine")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("IslandId");

                    b.ToTable("Quests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacterId = 1,
                            Description = "Embark on a journey to find the legendary One Piece treasure.",
                            ExperienceReward = 0,
                            GoldReward = 0,
                            IsRepeatable = false,
                            RequiredLevel = 0,
                            Status = 0,
                            Title = "Find the One Piece",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CharacterId = 2,
                            Description = "Train with the world's greatest swordsman to improve sword skills.",
                            ExperienceReward = 0,
                            GoldReward = 0,
                            IsRepeatable = false,
                            RequiredLevel = 0,
                            Status = 0,
                            Title = "Train with Mihawk",
                            Type = 0
                        });
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestCharacters", b =>
                {
                    b.Property<int>("QuestCharactersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestCharactersId");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("QuestCharacters");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestLogs");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredProgress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestObjectives");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CargoCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CrewCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrentDurability")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Durability")
                        .HasColumnType("REAL");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSunk")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Speed")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("OnePieceBattler.Models.ShipUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("EffectValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipUpgrades");
                });

            modelBuilder.Entity("OnePieceBattler.Models.ShipWeapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmmoCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentAmmo")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Damage")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Range")
                        .HasColumnType("REAL");

                    b.Property<int?>("ShipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipWeapons");
                });

            modelBuilder.Entity("CharacterMove", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("MoveExclusiveCharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceBattler.Models.Move", null)
                        .WithMany()
                        .HasForeignKey("MovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterQuestCharacters", b =>
                {
                    b.HasOne("OnePieceBattler.Models.QuestCharacters", null)
                        .WithMany()
                        .HasForeignKey("QuestCharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceBattler.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("QuestReceiversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnePieceBattler.Models.Battle", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Character", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceBattler.Models.Character", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Character", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Character", null)
                        .WithMany("Nakamas")
                        .HasForeignKey("CharacterId");

                    b.HasOne("OnePieceBattler.Models.Island", null)
                        .WithMany("Inhabitants")
                        .HasForeignKey("IslandId");

                    b.HasOne("OnePieceBattler.Models.QuestCharacters", null)
                        .WithMany("QuestGivers")
                        .HasForeignKey("QuestCharactersId");

                    b.HasOne("OnePieceBattler.Models.Ship", null)
                        .WithMany("Crew")
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Coordinates", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Island", null)
                        .WithOne("Coordinates")
                        .HasForeignKey("OnePieceBattler.Models.Coordinates", "IslandId");

                    b.HasOne("OnePieceBattler.Models.Ship", null)
                        .WithOne("CurrentCoordinates")
                        .HasForeignKey("OnePieceBattler.Models.Coordinates", "ShipId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.IslandEvent", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Island", null)
                        .WithMany("Events")
                        .HasForeignKey("IslandId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Item", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Character", null)
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId");

                    b.HasOne("OnePieceBattler.Models.Island", null)
                        .WithMany("AvailableItems")
                        .HasForeignKey("IslandId");

                    b.HasOne("OnePieceBattler.Models.Quest", null)
                        .WithMany("ItemRewards")
                        .HasForeignKey("QuestId");

                    b.HasOne("OnePieceBattler.Models.Ship", null)
                        .WithMany("Cargo")
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Move", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Battle", null)
                        .WithMany("Moves")
                        .HasForeignKey("BattleId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Quest", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Character", "AssignedCharacter")
                        .WithMany("Quests")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnePieceBattler.Models.Island", null)
                        .WithMany("AvailableQuests")
                        .HasForeignKey("IslandId");

                    b.Navigation("AssignedCharacter");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestCharacters", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Quest", "Quest")
                        .WithOne("QuestCharacters")
                        .HasForeignKey("OnePieceBattler.Models.QuestCharacters", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestLog", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Quest", null)
                        .WithMany("QuestLogs")
                        .HasForeignKey("QuestId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestObjective", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Quest", null)
                        .WithMany("Objectives")
                        .HasForeignKey("QuestId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Reward", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Quest", null)
                        .WithMany("Rewards")
                        .HasForeignKey("QuestId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.ShipUpgrade", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Ship", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.ShipWeapon", b =>
                {
                    b.HasOne("OnePieceBattler.Models.Ship", null)
                        .WithMany("Weapons")
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Battle", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Character", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Nakamas");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Island", b =>
                {
                    b.Navigation("AvailableItems");

                    b.Navigation("AvailableQuests");

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("Events");

                    b.Navigation("Inhabitants");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Quest", b =>
                {
                    b.Navigation("ItemRewards");

                    b.Navigation("Objectives");

                    b.Navigation("QuestCharacters");

                    b.Navigation("QuestLogs");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("OnePieceBattler.Models.QuestCharacters", b =>
                {
                    b.Navigation("QuestGivers");
                });

            modelBuilder.Entity("OnePieceBattler.Models.Ship", b =>
                {
                    b.Navigation("Cargo");

                    b.Navigation("Crew");

                    b.Navigation("CurrentCoordinates")
                        .IsRequired();

                    b.Navigation("Upgrades");

                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
